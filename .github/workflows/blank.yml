# Copy this entire block and run it in your terminal
git clone https://github.com/MortalArena/solana-memecoin-scanner.git && \
cd solana-memecoin-scanner && \
mkdir -p contracts/{src,interfaces} backend/src/{services,middleware,utils} frontend/{config,components} config && \
cat > contracts/src/TokenFactory.sol << 'EOL'
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./interfaces/IRaydiumDEX.sol";

contract TokenFactory is Ownable, ReentrancyGuard {
    struct TokenInfo {
        address tokenAddress;
        uint256 targetLiquidity;
        uint256 insuranceFee;
        uint256 totalInvested;
        bool isLocked;
        mapping(address => uint256) investments;
    }

    mapping(address => TokenInfo) public tokens;
    uint256 public constant INITIAL_VIRTUAL_SOL = 30 ether;
    uint256 public constant INITIAL_VIRTUAL_TOKENS = 1073000191;
    uint256 public constant INSURANCE_FEE_PERCENTAGE = 5; // 5%
    IRaydiumDEX public raydiumDEX;
    uint256 public constant LIQUIDITY_LOCK_PERIOD = 30 days;
    
    struct LiquidityInfo {
        address pair;
        uint256 lockTime;
        uint256 liquidityAmount;
    }
    
    mapping(address => LiquidityInfo) public liquidityInfo;
    
    event TokenCreated(address indexed tokenAddress, string name, string symbol);
    event TokenPurchased(address indexed token, address buyer, uint256 amount, uint256 cost);
    event InsuranceRefunded(address indexed token, address buyer, uint256 amount);
    event LiquidityInjected(
        address indexed token,
        address indexed pair,
        uint256 tokenAmount,
        uint256 solAmount
    );
    event MilestoneReached(address indexed token, uint256 marketCap);

    constructor(address _raydiumDEX) {
        raydiumDEX = IRaydiumDEX(_raydiumDEX);
    }
}
EOL

cat > contracts/interfaces/IRaydiumDEX.sol << 'EOL'
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IRaydiumDEX {
    function createPool(
        address tokenA,
        address tokenB,
        uint256 amountA,
        uint256 amountB
    ) external returns (address pair);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);
}
EOL

cat > config/config.ts << 'EOL'
import { z } from 'zod';
import * as dotenv from 'dotenv';

const envSchema = z.object({
  DATABASE_URL: z.string().url(),
  SOLANA_RPC_URL: z.string().url(),
  DEPLOYER_PRIVATE_KEY: z.string().min(64),
  SOLANA_NETWORK: z.enum(['mainnet-beta', 'devnet', 'testnet']),
  JWT_SECRET: z.string().min(32),
  ADMIN_API_KEY: z.string().min(32),
  RAYDIUM_PROGRAM_ID: z.string(),
  RAYDIUM_POOL_PROGRAM_ID: z.string(),
});

dotenv.config();

export const config = envSchema.parse({
  DATABASE_URL: process.env.DATABASE_URL,
  SOLANA_RPC_URL: process.env.SOLANA_RPC_URL || 'https://api.mainnet-beta.solana.com',
  DEPLOYER_PRIVATE_KEY: process.env.DEPLOYER_PRIVATE_KEY,
  SOLANA_NETWORK: process.env.SOLANA_NETWORK || 'mainnet-beta',
  JWT_SECRET: process.env.JWT_SECRET,
  ADMIN_API_KEY: process.env.ADMIN_API_KEY,
  RAYDIUM_PROGRAM_ID: process.env.RAYDIUM_PROGRAM_ID,
  RAYDIUM_POOL_PROGRAM_ID: process.env.RAYDIUM_POOL_PROGRAM_ID,
});
EOL

cat > .env.example << 'EOL'
# Database
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/tokenfactory"

# Solana
SOLANA_RPC_URL="https://api.devnet.solana.com"
SOLANA_NETWORK="devnet"

# Security
JWT_SECRET="your-jwt-secret"
ADMIN_API_KEY="your-admin-key"

# Frontend
NEXT_PUBLIC_SITE_URL="http://localhost:3000"
NEXT_PUBLIC_API_URL="http://localhost:3001"
EOL

git add .
git commit -m "Initial project setup"
